# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.
[gcode_macro list_macros]
description: Lists registered macros (and optionally show variable state).
  Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros: {}
gcode:
  # Load the config state once and save it.
  {% if not macros %}
    {% set renames = {} %}
    {% for k in printer.configfile.config %}
      {% if k.lower().startswith("gcode_macro") and
            printer.configfile.config[k].rename_existing %}
          {% set name = k.split(None, 1)[1] | lower %}
          {% set dummy = renames.__setitem__(name,
                          [printer.configfile.config[k].rename_existing|lower] +
                            renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
    {% for k in printer %}
      {% if k.lower().startswith("gcode_macro") %}
        {% set name = k.split(None, 1)[1] | lower %}
        {% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.SILENT|default(0)|int == 0 %}
    _LIST_MACROS_DISPLAY {rawparams}
  {% endif %}

[gcode_macro _list_macros_display]
gcode:
  {% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
  {% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}

  {% set macros = printer["gcode_macro list_macros"].macros %}
  {% set output = [] %}
  {% for k in macros %}
    {% if SEARCH in k | lower %}
      {% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
                          else "") %}
      {% set outvars = [] %}
      {% if VARS %}
        {% for v in printer["gcode_macro " ~ k] | sort %}
          {% set dummy = outvars.append("\n* %s: %s" %
                           (v, printer["gcode_macro " ~ k][v]|string)) %}
        {% endfor %}
      {% endif %}
      {% set dummy = output.append(line + outvars | join("")) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output | sort | join("\n")) }

[gcode_macro lazy_home]
description: Homes the specified axes. If lazy is true, already homed axes
  are skipped.
  Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode:
  # This is split apart so we can force the macro rename cache to be ready.
  LIST_MACROS SILENT=1
  _LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode:
  STATUS_HOMING
  # Find the real g28 command.
  {% set G28 = (printer["gcode_macro list_macros"].macros.g28|
                  default(["g28"],True))[-1] %}
  {% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
  {% if not axes %} # No axes means home everything.
    {% set axes = 'XYZ' %}
  {% endif %}
  {% if params.LAZY|default(1)|int %} # Prune out the already homed axes.
    {% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
  {% endif %}

  {% if axes %}
    {G28}{% for k in axes %}{' ' ~ k}{% endfor %}
  {% endif %}
  STATUS_READY

[gcode_macro g28]
description: Wraps the G28 command to add the Marlin "O" parameter so that
  already homed axes will not be homed again. See the Klipper documentation on
  G28 for the behavior of the other parameters.
  Usage: G28 [O] ...
rename_existing: G28.6245197
gcode:
  {% set axes = 'XYZ'|select('in', params)|join() %}
  LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}